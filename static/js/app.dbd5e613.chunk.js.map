{"version":3,"sources":["src/layouts/Layout.tsx","src/utils/nanoid.ts","src/redux/todos.slice.ts","src/redux/todos.store.ts","src/themes/appTheme.ts","src/utils/parseJson.ts","src/utils/persistence/LocalPersistence.ts","src/contexts/DarkThemeContext.tsx","src/layouts/Header.tsx","src/routes/index.ts","src/components/TodoEditor/index.tsx","src/pages/AddTodo.tsx","src/pages/EditTodo.tsx","src/components/AddTodoButton/index.tsx","src/hooks/useResponsiveStyles.tsx","src/components/ConfirmDeleteDialog/index.tsx","src/components/TodoItem/index.tsx","src/components/AfterDeleteSnackbar/index.tsx","src/components/Icon/index.tsx","src/components/ButtonGroup/index.tsx","src/components/TodoList/index.tsx","src/hooks/useTodos.tsx","src/mocks/todos.mocks.ts","src/pages/ListTodos.tsx","src/pages/Main.tsx","App.tsx"],"names":["Layout","children","colors","useTheme","View","style","backgroundColor","background","height","width","nanoid","customAlphabet","todoSlice","createSlice","name","initialState","todos","reducers","createTodo","state","action","todo","id","title","payload","completed","version","createdAt","Date","push","toggleTodo","find","t","updatedAt","deleteTodo","filter","updateTodo","setTodo","initTodos","todoReducer","reducer","selectTodos","todoState","selectTodoSorted","Array","from","sort","a","b","timeA","getTime","actions","todoStore","configureStore","middleware","fontConfig","web","regular","fontFamily","medium","light","thin","ios","android","default","getAppTheme","isDark","DarkTheme","DefaultTheme","fonts","configureFonts","parseJson","obj","reviver","JSON","parse","LocalStore","key","async","AsyncStorage","getItem","this","json","data","setItem","stringify","store","DarkThemeContext","createContext","dark","theme","setDarkTheme","DarkThemeProvider","userPrefersDarkMode","useColorScheme","React","useState","setDark","setTheme","useLayoutEffect","load","initialize","save","Provider","value","useDarkTheme","useContext","Header","navigation","back","Appbar","BackAction","onPress","goBack","Content","styles","themeToggle","Switch","onValueChange","icon","color","size","StyleSheet","create","display","flexDirection","alignItems","switch","marginEnd","routes","list","add","edit","TodoEditor","useNavigation","showDetails","setShowDetails","form","useForm","defaultValues","control","handleSubmit","errors","formState","dispatch","useDispatch","container","heading","Headline","Chip","textStyle","accent","centerText","avatar","completedIcon","TextInput","marginY","label","disabled","rules","required","validate","s","trim","length","render","field","onChange","onBlur","placeholder","onChangeText","multiline","HelperText","type","visible","Text","String","toLocaleString","Button","mode","navigate","paddingHorizontal","paddingVertical","justifyContent","details","marginVertical","AddTodo","EditTodo","todoId","route","params","useSelector","AddTodoButton","active","setActive","FAB","fab","position","margin","right","bottom","ResponsiveStyles","factory","useWindowDimensions","result","os","Platform","OS","orientation","k","v","useReponsiveStyles","ConfirmDeleteDialog","onConfirm","setVisible","handleHideDialog","useSyles","Portal","Dialog","dialog","onDismiss","Title","Paragraph","fontWeight","Actions","marginHorizontal","card","borderRadius","elevation","todoLead","marginRight","textDashed","textDecorationLine","opacity","text","TodoItem","onToggle","onEdit","onDelete","Surface","Checkbox","status","IconButton","primary","AfterDeleteSnackBar","deletedTodoRef","durationMs","onDimiss","useStyles","handleDismiss","current","undefined","Snackbar","snackbar","duration","deletedTodo","Icon","createButtonGroupItem","ButtonGroup","items","isSelected","item","map","newValue","TodoFilter","TodoList","layout","dialogVisible","setDialogVisible","selectedTodo","setSelectedTodo","searchText","setSearchText","filteredTodos","setFilteredTodos","deletedRef","useRef","afterDeleteSnackbar","setAfterDeleteSnackbar","ALL","setFilter","isFiltering","padding","px","useEffect","COMPLETED","ACTIVE","toLowerCase","includes","pxLarge","pxMedium","handleEdit","handleTodoToggle","showDeleteDialog","search","marginBottom","Searchbar","ScrollView","contentContainerStyle","Caption","marginTop","paddingTop","paddingBottom","fontSize","textAlign","ListTodos","todoStateReviver","unsuscribe","subscribe","appState","getState","useTodosStorage","isArray","Stack","createNativeStackNavigator","Main","NavigationContainer","Navigator","initialRouteName","screenOptions","header","props","animation","contentStyle","Screen","component","App"],"mappings":"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","file":"static/js/app.dbd5e613.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { View } from \"react-native\";\nimport { useTheme } from \"react-native-paper\";\n\nconst Layout: FC = ({ children }) => {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      style={[\n        { backgroundColor: colors.background },\n        { height: \"100%\", width: \"100%\" },\n      ]}\n    >\n      {children}\n    </View>\n  );\n};\n\nexport default Layout;\n","import { customAlphabet } from 'nanoid/non-secure'; \n\n/**\n * Non-secure random id generator.\n * \n * @remarks\n * React-native doesn't support 'crypto' from NodeJS.\n */\nexport const nanoid = customAlphabet('abcdefghijklmnopqrstuvwxyz0123456789', 10); ","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Todo } from \"../model/Todo\";\nimport { nanoid } from \"../utils/nanoid\";\nimport { RootState } from \"./todos.store\";\n\n/**\n * State of the app.\n */\nexport interface TodoState {\n  /**\n   * The currently available todos.\n   */\n  todos: Todo[];\n}\n\nconst INITIAL_STATE: TodoState = {\n  todos: [],\n};\n\nconst todoSlice = createSlice({\n  name: \"todos\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    createTodo: (state, action: PayloadAction<{ title: string }>) => {\n      const todo: Todo = {\n        id: nanoid(),\n        title: action.payload.title,\n        completed: false,\n        version: 1,\n        createdAt: new Date(),\n      };\n      state.todos.push(todo);\n    },\n    toggleTodo: (state, action: PayloadAction<{ id: string }>) => {\n      const todo = state.todos.find((t) => t.id === action.payload.id);\n      if (todo) {\n        todo.completed = !todo.completed;\n        todo.version++;\n        todo.updatedAt = new Date();\n      }\n    },\n    deleteTodo: (state, action: PayloadAction<{ id: string }>) => {\n      state.todos = state.todos.filter((t) => t.id !== action.payload.id);\n    },\n    updateTodo: (\n      state,\n      action: PayloadAction<{ id: string; title: string }>\n    ) => {\n      const todo = state.todos.find((t) => t.id === action.payload.id);\n      if (todo) {\n        todo.title = action.payload.title;\n        todo.version++;\n        todo.updatedAt = new Date();\n      }\n    },\n    setTodo: (state, action: PayloadAction<{ todo: Todo }>) => {\n      state.todos.push(action.payload.todo);\n    },\n    initTodos: (state, action: PayloadAction<{ todos: Todo[] }>) => {\n      state.todos = action.payload.todos;\n    },\n  },\n});\n\n// The todos reducer used by the store.\nexport const todoReducer = todoSlice.reducer;\n\n// Select all the todos\nexport const selectTodos = (state: RootState) => state.todoState.todos;\n\n// Select all the todos sorted\nexport const selectTodoSorted = (state: RootState) => {\n  const todos = Array.from(state.todoState.todos);\n  todos.sort((a, b) => {\n    const timeA = a.createdAt?.getTime() ?? 0;\n    const timeB = b.createdAt?.getTime() ?? 0;\n    return timeB - timeA;\n  });\n  return todos;\n};\n\n// The actions used by the app.\nexport const {\n  createTodo,\n  deleteTodo,\n  updateTodo,\n  setTodo,\n  toggleTodo,\n  initTodos,\n} = todoSlice.actions;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { todoReducer } from \"./todos.slice\";\n\n/**\n * The root store.\n */\nexport const todoStore = configureStore({\n  reducer: {\n    todoState: todoReducer,\n  },\n  middleware: [],\n});\n\n/**\n * Represents all the states of the app.\n */\nexport type RootState = ReturnType<typeof todoStore.getState>;\n","import { Theme } from \"react-native-paper/lib/typescript/types\";\nimport { configureFonts, DarkTheme, DefaultTheme } from \"react-native-paper\";\n\nconst fontConfig = {\n  web: {\n    regular: {\n      fontFamily: \"monospace\",\n    },\n    medium: {\n      fontFamily: \"monospace\",\n    },\n    light: {\n      fontFamily: \"monospace\",\n    },\n    thin: {\n      fontFamily: \"monospace\",\n    },\n  },\n  ios: {\n    regular: {\n      fontFamily: \"monospace\",\n    },\n    medium: {\n      fontFamily: \"monospace\",\n    },\n    light: {\n      fontFamily: \"monospace\",\n    },\n    thin: {\n      fontFamily: \"monospace\",\n    },\n  },\n  android: {\n    regular: {\n      fontFamily: \"monospace\",\n    },\n    medium: {\n      fontFamily: \"monospace\",\n    },\n    light: {\n      fontFamily: \"monospace\",\n    },\n    thin: {\n      fontFamily: \"monospace\",\n    },\n  },\n  default: {\n    regular: {\n      fontFamily: \"monospace\",\n    },\n    medium: {\n      fontFamily: \"monospace\",\n    },\n    light: {\n      fontFamily: \"monospace\",\n    },\n    thin: {\n      fontFamily: \"monospace\",\n    },\n  },\n};\n\nexport function getAppTheme(isDark: boolean): Theme {\n  const mainTheme = isDark ? DarkTheme : DefaultTheme;\n  return {\n    ...mainTheme,\n    fonts: configureFonts(fontConfig),\n  };\n}\n","\n/**\n * A funciton used to parse specified values.\n */\nexport type Reviver<T> = (key: keyof T, value: unknown) => unknown;\n\n/**\n * Parse a JSON string to an object.\n * @param obj The string to parse.\n * @param reviver An optional reviver for parsing specific values.\n * @returns The parsed object or null if failed.\n */\nexport function parseJson<T>(\n  obj: string | null,\n  reviver?: Reviver<T>\n): T | null {\n  if (obj == null) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(obj, reviver as any);\n  } catch {\n    return null;\n  }\n}\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { parseJson, Reviver } from \"../parseJson\";\nimport { Store } from \"./Store\";\n\n/**\n * A store using the `AsyncStorage` API.\n */\nexport class LocalStore<T> implements Store<T> {\n  constructor(public readonly key: string) {}\n\n  async load(reviver?: Reviver<T>): Promise<T | null> {\n    const json = await AsyncStorage.getItem(this.key);\n\n    if (json == null) {\n      return null;\n    }\n\n    return parseJson<T>(json, reviver);\n  }\n\n  async save(data: T): Promise<void> {\n    await AsyncStorage.setItem(this.key, JSON.stringify(data));\n  }\n}\n","import React, { createContext, useContext, useLayoutEffect } from \"react\";\nimport { useColorScheme } from \"react-native\";\nimport { Theme } from \"react-native-paper/lib/typescript/types\";\nimport { getAppTheme } from \"../themes/appTheme\";\nimport { LocalStore } from \"../utils/persistence/LocalPersistence\";\n\nconst store = new LocalStore<boolean>(\"todos/isDark\");\n\nexport interface DarkThemeContextProps {\n  theme: Theme;\n  dark: boolean;\n  setDarkTheme: (dark: boolean) => void;\n}\n\nexport const DarkThemeContext = createContext<DarkThemeContextProps>({\n  dark: false,\n  theme: {} as Theme,\n  setDarkTheme: () => {},\n});\n\nexport const DarkThemeProvider: React.FC = ({ children }) => {\n  const colorScheme = useColorScheme();\n  const userPrefersDarkMode = colorScheme === \"dark\";\n  const [dark, setDark] = React.useState(userPrefersDarkMode);\n  const [theme, setTheme] = React.useState<Theme>(getAppTheme(dark));\n\n  useLayoutEffect(() => {\n    const initialize = async () => {\n      const isDark = await store.load();\n      if (isDark != null) {\n        setDarkTheme(isDark);\n      }\n    };\n\n    initialize();\n  }, []);\n\n  const setDarkTheme = (dark: boolean) => {\n    setDark(dark);\n    setTheme(getAppTheme(dark));\n    store.save(dark);\n  };\n\n  return (\n    <DarkThemeContext.Provider value={{ theme, dark, setDarkTheme }}>\n      {children}\n    </DarkThemeContext.Provider>\n  );\n};\n\nexport const useDarkTheme = () => useContext(DarkThemeContext);\n\nexport const useIsDarkTheme = () => useContext(DarkThemeContext).dark;\n","import * as React from \"react\";\nimport { Appbar, Avatar, Switch } from \"react-native-paper\";\nimport { NativeStackHeaderProps } from \"@react-navigation/native-stack\";\nimport { useDarkTheme } from \"../contexts/DarkThemeContext\";\nimport { StyleSheet, View } from \"react-native\";\n\nexport default function Header({ navigation, back }: NativeStackHeaderProps) {\n  const { dark, setDarkTheme } = useDarkTheme();\n\n  const handleToggleDarkTheme = () => {\n    setDarkTheme(!dark);\n  };\n\n  return (\n    <Appbar.Header>\n      {back ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title=\"Todos App\" />\n      <View style={styles.themeToggle}>\n        <Switch value={dark} onValueChange={handleToggleDarkTheme} style={styles.themeToggle}/>\n        {dark ? (\n          <Avatar.Icon style={styles.icon} color=\"#00ffbb\" size={35} icon=\"weather-night\" />\n        ) : (\n          <Avatar.Icon style={styles.icon} color=\"#ebd534\" size={35} icon=\"white-balance-sunny\" />\n        )}\n      </View>\n    </Appbar.Header>\n  );\n}\n\nconst styles = StyleSheet.create({\n  themeToggle: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  icon: {\n    backgroundColor: '#0000'\n  },\n  switch: {\n    marginEnd: 10\n  }\n});\n","/**\n * The routes of the app.\n */\nconst routes = {\n  list: \"Todos - List\",\n  add: \"Todos - Add\",\n  edit: \"Todos - Edit\",\n} as const;\n\nexport default routes;\n","import React from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport { StyleSheet, View } from \"react-native\";\nimport {\n  Text,\n  Button,\n  Chip,\n  Headline,\n  HelperText,\n  Switch,\n  TextInput,\n  Avatar,\n} from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\nimport { Todo } from \"../../model/Todo\";\nimport { createTodo, updateTodo } from \"../../redux/todos.slice\";\nimport { useTheme } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { NavigationType } from \"../../types\";\nimport routes from \"../../routes\";\n\ninterface TodoInput {\n  title: string;\n}\n\nexport interface TodoEditorProps {\n  title: string;\n  todo?: Todo;\n}\n\nexport default function TodoEditor({ title, todo }: TodoEditorProps) {\n  const { colors } = useTheme();\n  const navigation = useNavigation<NavigationType>();\n  const [showDetails, setShowDetails] = React.useState(false);\n  const form = useForm<TodoInput>({\n    defaultValues: { title: todo?.title || \"\" },\n  });\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors },\n  } = form;\n\n  const dispatch = useDispatch();\n  const onSubmit = (data: TodoInput) => {\n    if (todo) {\n      dispatch(updateTodo({ ...data, id: todo.id }));\n    } else {\n      dispatch(createTodo(data));\n    }\n\n    navigation.navigate(routes.list, {});\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.heading}>\n        <Headline>{title}</Headline>\n        {todo && (\n          <Chip\n            textStyle={{ color: \"black\" }}\n            style={[{ backgroundColor: colors.accent }, styles.centerText]}\n            avatar={\n              <Avatar.Icon\n                icon=\"check-bold\"\n                style={styles.completedIcon}\n                color=\"black\"\n                size={25}\n              />\n            }\n          >\n            Completed\n          </Chip>\n        )}\n      </View>\n\n      {todo && (\n        <TextInput\n          style={styles.marginY}\n          label={\"Id\"}\n          value={todo.id}\n          disabled\n        />\n      )}\n      <Controller\n        control={control}\n        rules={{\n          required: true,\n          validate: (s) => s.trim().length > 0,\n        }}\n        render={({ field: { onChange, onBlur, value } }) => (\n          <TextInput\n            label=\"Title\"\n            placeholder=\"Title of this todo...\"\n            onBlur={onBlur}\n            onChangeText={onChange}\n            multiline\n            style={styles.marginY}\n            value={value}\n          />\n        )}\n        name=\"title\"\n      />\n      <HelperText type=\"error\" visible={!!errors.title}>\n        Title is required\n      </HelperText>\n      {todo && (\n        <View style={[styles.centerText, styles.marginY]}>\n          <Switch value={showDetails} onValueChange={setShowDetails}></Switch>\n          <Text> Show details</Text>\n        </View>\n      )}\n      {todo && showDetails && (\n        <>\n          <TextInput\n            label={\"Version\"}\n            style={styles.marginY}\n            value={String(todo.version)}\n            disabled\n          />\n          <TextInput\n            label={\"Created At\"}\n            style={styles.marginY}\n            value={todo.createdAt?.toLocaleString() || \"N/A\"}\n            disabled\n          />\n          <TextInput\n            label={\"Updated At\"}\n            style={styles.marginY}\n            value={todo.updatedAt?.toLocaleString() || \"N/A\"}\n            disabled\n          />\n        </>\n      )}\n      <View style={[styles.actions, styles.marginY]}>\n        <Button\n          icon=\"content-save\"\n          mode=\"contained\"\n          onPress={handleSubmit(onSubmit)}\n        >\n          Save\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    paddingHorizontal: 10,\n    paddingVertical: 30,\n  },\n  heading: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n  },\n  centerText: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  details: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  completedIcon: {\n    backgroundColor: \"#0000\",\n  },\n  marginY: {\n    marginVertical: 5,\n  },\n});\n","import TodoEditor from \"../components/TodoEditor\";\n\n// Route for adding a new todo\nexport default function AddTodo() {\n  return <TodoEditor title={\"Add new todo\"} />;\n}\n","import TodoEditor from \"../components/TodoEditor\";\nimport { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { RootStackParamList } from \"../routes/navigator\";\nimport { useSelector } from \"react-redux\";\nimport { selectTodos } from \"../redux/todos.slice\";\nimport routes from \"../routes\";\n\ntype Props = NativeStackScreenProps<RootStackParamList, typeof routes.edit>;\n\n// Route for editing a todo\nexport default function EditTodo({ route }: Props) {\n  const { todoId } = route.params;\n  const todo = useSelector(selectTodos).find((todo) => todo.id === todoId);\n  return <TodoEditor title={\"Edit todo\"} todo={todo} />;\n}\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { FAB } from \"react-native-paper\";\n\nexport interface AddTodoButtonProps {\n  onPress: () => void;\n}\n\nexport default function AddTodoButton({ onPress }: AddTodoButtonProps) {\n  const [active, setActive] = React.useState(false);\n\n  function handleOnPress() {\n    onPress();\n    setActive(!active);\n  }\n\n  return (\n    <FAB style={styles.fab} icon=\"plus\" color=\"white\" onPress={handleOnPress} />\n  );\n}\n\nconst styles = StyleSheet.create({\n  fab: {\n    position: \"absolute\",\n    margin: 16,\n    right: 10,\n    bottom: 10,\n  },\n});\n","import {\n  ViewStyle,\n  TextStyle,\n  ImageStyle,\n  ScaledSize,\n  useWindowDimensions,\n  PlatformOSType,\n  Platform,\n} from \"react-native\";\n\n/**\n * Default style types.\n */\nexport type DefaultStyles = ViewStyle | TextStyle | ImageStyle;\n\n/**\n * Additional details of the device.\n */\nexport interface DeviceDetails {\n  /**\n   * The current operating system.\n   */\n  os: PlatformOSType;\n\n  /**\n   * The orientation of the device.\n   */\n  orientation: \"portrait\" | \"landscape\";\n}\n\n/**\n * Base definition of the styles.\n */\nexport type NamedStyles<T> = {\n  [P in keyof T]: DefaultStyles;\n};\n\n/**\n * Represents a factory for creating styles.\n */\nexport type NamedStylesFactory<T> = {\n  [P in keyof T]:\n    | ((size: ScaledSize, device: DeviceDetails) => DefaultStyles)\n    | DefaultStyles;\n};\n\n/**\n * Helper for create responsive styles.\n */\nexport class ResponsiveStyles {\n  private constructor() {}\n\n  /**\n   * Create a function that returns a responsive styles object for the given factory.\n   * @param factory The factory styles.\n   * @returns A function that returns the responsive styles.\n   *\n   * @example\n   * ```\n   * const useStyles = ResponsiveStyles.create({\n   *  container: (size) => ({\n   *    padding: size.width > 800 ? 30 : 5,\n   *  }),\n   *  style: ({width}) => ({\n   *    color: width > 800 ? \"red\" : \"blue\"\n   *  }),\n   * });\n   *\n   * const styles = useStyles();\n   * <View style={styles.container} >\n   *    <Text>Hello responsive style!</Text>\n   * </View>\n   * ```\n   */\n  static create<T extends NamedStyles<T> | NamedStyles<any>>(\n    factory: T | NamedStylesFactory<T>\n  ): () => T {\n    return () => useReponsiveStyles(factory);\n  }\n}\n\n/**\n * Creates a styles that will be responsive based on the window size.\n * @param factory The factory used to create the styles.\n * @returns A style that change with the screen size.\n */\nexport function useReponsiveStyles<T extends NamedStyles<T> | NamedStyles<any>>(\n  factory: T | NamedStylesFactory<T>\n): T {\n  const size = useWindowDimensions();\n  const result: Record<keyof T, unknown> = {} as T;\n  const details: DeviceDetails = {\n    os: Platform.OS,\n    orientation: size.width > size.height ? \"landscape\" : \"portrait\",\n  };\n\n  for (const k in factory) {\n    const v = factory[k];\n    if (typeof v === \"function\") {\n      result[k] = v(size, details);\n    } else {\n      result[k] = v;\n    }\n  }\n\n  return result as T;\n}\n","import React from \"react\";\nimport { Text } from \"react-native\";\nimport { Portal, Dialog, Button, Paragraph } from \"react-native-paper\";\nimport { ResponsiveStyles } from \"../../hooks/useResponsiveStyles\";\nimport { Todo } from \"../../model/Todo\";\n\nexport interface ConfirmDeleteDialogProps {\n  todo: Todo | null;\n  visible: boolean;\n  setVisible: (visible: boolean) => void;\n  onConfirm: () => void;\n}\n\nexport default function ConfirmDeleteDialog({\n  todo,\n  visible,\n  onConfirm,\n  setVisible,\n}: ConfirmDeleteDialogProps) {\n  const handleHideDialog = () => setVisible(false);\n  const handleConfirm = () => onConfirm();\n  const styles = useSyles();\n\n  return (\n    <Portal>\n      <Dialog\n        style={styles.dialog}\n        visible={visible}\n        onDismiss={handleHideDialog}\n      >\n        <Dialog.Title>Do you want to delete this Todo?</Dialog.Title>\n        <Dialog.Content>\n          <Paragraph>\n            Delete \"<Text style={{ fontWeight: \"bold\" }}>{todo?.title}\"?</Text>\n          </Paragraph>\n        </Dialog.Content>\n        <Dialog.Actions>\n          <Button onPress={handleHideDialog}>Cancel</Button>\n          <Button onPress={handleConfirm}>Delete</Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  );\n}\n\nconst useSyles = ResponsiveStyles.create({\n  dialog: (size) => ({\n    marginHorizontal: size.width > 1000 ? \"20%\" : \"5%\",\n  }),\n});\n","import React from \"react\";\nimport { StyleSheet, View, Text } from \"react-native\";\nimport { Checkbox, IconButton, Surface, useTheme } from \"react-native-paper\";\nimport { useIsDarkTheme } from \"../../contexts/DarkThemeContext\";\nimport { Todo } from \"../../model/Todo\";\n\nexport interface TodoItemProps {\n  todo: Todo;\n  onToggle: (todo: Todo) => void;\n  onEdit: (todo: Todo) => void;\n  onDelete: (todo: Todo) => void;\n}\n\nconst TodoItem: React.FC<TodoItemProps> = ({\n  todo,\n  onToggle,\n  onEdit,\n  onDelete,\n}) => {\n  const { colors } = useTheme();\n  const dark = useIsDarkTheme();\n\n  return (\n    <Surface style={[styles.card, { backgroundColor: dark ? \"#1f1f1f\" : \"white\" }]}>\n      <View style={styles.todoLead}>\n        <View style={{ marginRight: 10 }}>\n          <Checkbox\n            onPress={() => onToggle(todo)}\n            status={todo.completed === true ? \"checked\" : \"unchecked\"}\n          />\n        </View>\n        <Text\n          style={[\n            { color: colors.text },\n            styles.text,\n            todo.completed ? styles.textDashed : {},\n          ]}\n        >\n          {todo.title}\n        </Text>\n      </View>\n\n      <View style={styles.actions}>\n        <IconButton\n          icon=\"lead-pencil\"\n          size={20}\n          color={colors.primary}\n          onPress={() => onEdit(todo)}\n        />\n        <IconButton\n          icon=\"trash-can\"\n          size={20}\n          color={colors.primary}\n          onPress={() => onDelete(todo)}\n        />\n      </View>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  card: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    paddingHorizontal: 20,\n    paddingVertical: 15,\n    borderRadius: 10,\n    marginHorizontal: 2.5,\n    elevation: 4\n  },\n  todoLead: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    marginRight: \"auto\",\n  },\n  actions: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n  textDashed: {\n    textDecorationLine: \"line-through\",\n    opacity: 0.4,\n  },\n  text: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n\nexport default TodoItem;\n","import React, { MutableRefObject } from \"react\";\nimport { Snackbar, Text } from \"react-native-paper\";\nimport { useDispatch } from \"react-redux\";\nimport { ResponsiveStyles } from \"../../hooks/useResponsiveStyles\";\nimport { Todo } from \"../../model/Todo\";\nimport { setTodo } from \"../../redux/todos.slice\";\n\nexport interface AfterDeleteSnackBarProps {\n  durationMs?: number;\n  deletedTodoRef: MutableRefObject<Todo | undefined>;\n  visible: boolean;\n  setVisible: (visible: boolean) => void;\n  onDimiss?: () => void;\n}\n\nexport default function AfterDeleteSnackBar({\n  deletedTodoRef,\n  durationMs,\n  visible,\n  setVisible,\n  onDimiss,\n}: AfterDeleteSnackBarProps) {\n  const dispatch = useDispatch();\n  const styles = useStyles();\n\n  const handleDismiss = () => {\n    setVisible?.(false);\n    deletedTodoRef.current = undefined;\n\n    if (onDimiss) {\n      onDimiss();\n    }\n  };\n\n  const handleUndo = () => {\n    const deletedTodo = deletedTodoRef.current;\n    if (deletedTodo) {\n      dispatch(\n        setTodo({\n          todo: {\n            ...deletedTodo,\n            version: deletedTodo.version + 1,\n          },\n        })\n      );\n    }\n\n    handleDismiss();\n  };\n\n  return (\n    <Snackbar\n      style={[styles.snackbar]}\n      duration={durationMs}\n      visible={visible}\n      onDismiss={handleDismiss}\n      action={{\n        label: \"Undo\",\n        onPress: handleUndo,\n      }}\n    >\n      <Text style={{ color: \"white\" }}>The todo was deleted</Text>\n    </Snackbar>\n  );\n}\n\nconst useStyles = ResponsiveStyles.create({\n  snackbar: ({ width }) => ({\n    marginHorizontal: width > 600 ? \"20%\" : \"5%\",\n    backgroundColor: \"#383838\",\n  }),\n});\n","import { Avatar } from \"react-native-paper\";\n\nexport interface IconProps {\n  icon: string;\n  size?: number;\n  color?: string;\n}\n\nexport default function Icon({ icon, size, color }: IconProps) {\n  return (\n    <Avatar.Icon\n      icon={icon}\n      size={size}\n      color={color}\n      style={{ backgroundColor: \"#0000\" }}\n    />\n  );\n}\n","import { useTheme } from \"@react-navigation/native\";\nimport React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Text, Chip } from \"react-native-paper\";\nimport Icon from \"../Icon\";\n\nexport interface ButtonGroupItem<T> {\n  label: string;\n  icon: string;\n  value: T;\n}\n\nexport function createButtonGroupItem<T>(\n  label: string,\n  value: T,\n  icon: string\n): ButtonGroupItem<T> {\n  return {\n    label,\n    icon,\n    value,\n  };\n}\n\nexport interface ButtonGroupProps<T> {\n  items: ButtonGroupItem<T>[];\n  value: T;\n  onChange: (value: T) => void;\n}\n\nexport default function ButtonGroup<T>({\n  items,\n  value,\n  onChange,\n}: ButtonGroupProps<T>) {\n  const { colors } = useTheme();\n  const isSelected = (item: ButtonGroupItem<T>) => item.value === value;\n\n  function handleChange(newValue: T) {\n    onChange(newValue);\n  }\n\n  return (\n    <View style={styles.container}>\n      {items.map((item) => (\n        <Chip\n          style={[\n            { backgroundColor: colors.primary },\n            { opacity: isSelected(item) ? 1 : 0.5 },\n            styles.item\n          ]}\n          key={item.label}\n          avatar={<Icon icon={item.icon} size={30} color={\"white\"} />}\n          onPress={() => handleChange(item.value)}\n        >\n          <Text style={{ color: \"white\" }}>{item.label}</Text>\n        </Chip>\n      ))}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  item: {\n    margin: 2.5\n  }\n});\n","import { useNavigation } from \"@react-navigation/native\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  useWindowDimensions,\n  ScrollView,\n} from \"react-native\";\nimport { useDispatch } from \"react-redux\";\nimport { Todo } from \"../../model/Todo\";\nimport { deleteTodo, toggleTodo } from \"../../redux/todos.slice\";\nimport routes from \"../../routes\";\nimport ConfirmDeleteDialog from \"../ConfirmDeleteDialog\";\nimport TodoItem from \"../TodoItem\";\nimport { NavigationType } from \"../../types\";\nimport { Caption, Headline, Searchbar } from \"react-native-paper\";\nimport { useTodos } from \"../../hooks/useTodos\";\nimport AfterDeleteSnackBar from \"../AfterDeleteSnackbar\";\nimport ButtonGroup, { createButtonGroupItem } from \"../ButtonGroup\";\n\nenum TodoFilter {\n  ALL = \"ALL\",\n  COMPLETED = \"COMPLETED\",\n  ACTIVE = \"ACTIVE\",\n}\n\nexport default function TodoList() {\n  const todos = useTodos();\n  const layout = useWindowDimensions();\n  const dispatch = useDispatch();\n  const navigation = useNavigation<NavigationType>();\n  const [dialogVisible, setDialogVisible] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [searchText, setSearchText] = useState(\"\");\n  const [filteredTodos, setFilteredTodos] = useState<Todo[]>(todos);\n  const deletedRef = useRef<Todo | undefined>(undefined);\n  const [afterDeleteSnackbar, setAfterDeleteSnackbar] = useState(false);\n  const [filter, setFilter] = useState<TodoFilter>(TodoFilter.ALL);\n  const isFiltering = searchText.trim().length > 0 || filter !== TodoFilter.ALL;\n  let padding = styles.px;\n\n  useEffect(() => {\n    let result: Todo[] = todos;\n\n    switch (filter) {\n      case TodoFilter.COMPLETED:\n        result = todos.filter((todo) => todo.completed);\n        break;\n      case TodoFilter.ACTIVE:\n        result = todos.filter((todo) => !todo.completed);\n        break;\n      case TodoFilter.ALL:\n        break;\n    }\n\n    if (searchText.trim().length > 0) {\n      const s = searchText.trim().toLowerCase();\n      result = result.filter((todo) =>\n        todo.title.trim().toLowerCase().includes(s)\n      );\n    }\n\n    setFilteredTodos(result);\n  }, [todos, filter, searchText]);\n\n  if (layout.width > 1000) {\n    padding = styles.pxLarge;\n  } else if (layout.width > 600) {\n    padding = styles.pxMedium;\n  }\n\n  const handleEdit = (t: Todo) => {\n    navigation.navigate(routes.edit, {\n      todoId: t.id,\n    });\n  };\n\n  const handleTodoToggle = (t: Todo) => {\n    dispatch(toggleTodo({ id: t.id }));\n  };\n\n  const showDeleteDialog = (t: Todo) => {\n    setDialogVisible(true);\n    setSelectedTodo(t);\n  };\n\n  const confirmDelete = () => {\n    if (selectedTodo) {\n      deletedRef.current = selectedTodo;\n      dispatch(deleteTodo({ id: selectedTodo.id }));\n      setAfterDeleteSnackbar(true);\n    }\n\n    setDialogVisible(false);\n    setSelectedTodo(null);\n  };\n\n  return (\n    <>\n      <View style={[styles.search, padding]}>\n        <View style={{ marginBottom: 10 }}>\n          <ButtonGroup\n            value={filter}\n            onChange={setFilter}\n            items={[\n              createButtonGroupItem(\n                TodoFilter.ALL,\n                TodoFilter.ALL,\n                \"filter-variant\"\n              ),\n              createButtonGroupItem(\n                TodoFilter.COMPLETED,\n                TodoFilter.COMPLETED,\n                \"check-bold\"\n              ),\n              createButtonGroupItem(\n                TodoFilter.ACTIVE,\n                TodoFilter.ACTIVE,\n                \"checkbox-blank-circle-outline\"\n              ),\n            ]}\n          />\n        </View>\n        <Searchbar\n          placeholder=\"Search\"\n          onChangeText={setSearchText}\n          value={searchText}\n        />\n      </View>\n\n      <ScrollView contentContainerStyle={[styles.list, padding]}>\n        <Headline>My todos</Headline>\n        {isFiltering && todos.length > 0 && filteredTodos.length === 0 && (\n          <Caption style={styles.centerText}>No todos found</Caption>\n        )}\n        {todos.length === 0 && (\n          <Caption style={styles.centerText}>No todos available</Caption>\n        )}\n        {filteredTodos.map((todo) => (\n          <View key={todo.id} style={styles.item}>\n            <TodoItem\n              todo={todo}\n              onToggle={handleTodoToggle}\n              onDelete={showDeleteDialog}\n              onEdit={handleEdit}\n            />\n          </View>\n        ))}\n      </ScrollView>\n      <ConfirmDeleteDialog\n        todo={selectedTodo}\n        visible={dialogVisible}\n        setVisible={setDialogVisible}\n        onConfirm={confirmDelete}\n      />\n      <AfterDeleteSnackBar\n        durationMs={5000}\n        visible={afterDeleteSnackbar}\n        setVisible={setAfterDeleteSnackbar}\n        deletedTodoRef={deletedRef}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  px: {\n    paddingHorizontal: 10,\n  },\n  pxMedium: {\n    paddingHorizontal: 60,\n  },\n  pxLarge: {\n    paddingHorizontal: 250,\n  },\n  search: {\n    marginBottom: 20,\n    marginTop: 10,\n  },\n  list: {\n    paddingTop: 5,\n    paddingBottom: 80,\n    backgroundColor: \"transparent\",\n  },\n  item: {\n    marginVertical: 7,\n  },\n  centerText: {\n    fontSize: 20,\n    padding: 40,\n    textAlign: \"center\",\n    marginHorizontal: \"auto\",\n  },\n});\n","import { useSelector } from \"react-redux\";\nimport { selectTodoSorted } from \"../redux/todos.slice\";\n\nexport function useTodos() {\n    return useSelector(selectTodoSorted);\n}","\nimport { Todo } from \"../model/Todo\";\nimport { nanoid } from \"../utils/nanoid\";\n\nconst todosMocks: Todo[] = [\n  createTodo(\"Walk the dog\"),\n  createTodo(\"Buy milk\"),\n  createTodo(\"Buy eggs\"),\n  createTodo(\"Buy bread\"),\n  createTodo(\"Do the laundry\"),\n  createTodo(\"Wash the dishes\"),\n  createTodo(\"Clean the house\"),\n  createTodo(\"Buy a new car\"),\n];\n\nfunction createTodo(title: string): Todo {\n  return {\n    id: nanoid(),\n    title,\n    completed: false,\n    version: 1,\n    createdAt: new Date(),\n  };\n}\n\nexport default todosMocks;","import { useNavigation } from \"@react-navigation/native\";\nimport React, { useEffect } from \"react\";\nimport { View } from \"react-native\";\nimport { useDispatch } from \"react-redux\";\nimport AddTodoButton from \"../components/AddTodoButton\";\nimport TodoList from \"../components/TodoList\";\nimport todosMocks from \"../mocks/todos.mocks\";\nimport { Todo } from \"../model/Todo\";\nimport { initTodos, TodoState } from \"../redux/todos.slice\";\nimport { todoStore } from \"../redux/todos.store\";\nimport routes from \"../routes\";\nimport { NavigationType } from \"../types\";\nimport { LocalStore } from \"../utils/persistence/LocalPersistence\";\n\nconst store = new LocalStore<TodoState>(\"todos/data\");\n\nexport default function ListTodos() {\n  const navigation = useNavigation<NavigationType>();\n  useTodosStorage();\n\n  return (\n    <View style={{ height: \"100%\" }}>\n      <TodoList />\n      <AddTodoButton onPress={() => navigation.navigate(routes.add, {})} />\n    </View>\n  );\n}\n\nfunction useTodosStorage() {\n  const dispatch = useDispatch();\n\n  // Loads the todos from the storage asynchronously\n  useEffect(() => {\n    const initialize = async () => {\n      const data = await store.load(todoStateReviver);\n\n      if (data) {\n        dispatch(initTodos({ todos: data.todos }));\n      } else if (__DEV__) {\n        // Only DEV, load mock data\n        dispatch(initTodos({ todos: todosMocks }));\n      }\n    };\n\n    initialize();\n  }, []);\n\n  // We subscribe to the store to save the todos to the storage after each change.\n  // This is OK because we only had 1 store in the app\n  useEffect(() => {\n    const unsuscribe = todoStore.subscribe(async () => {\n      const appState = todoStore.getState();\n      await store.save(appState.todoState);\n    });\n\n    return () => unsuscribe();\n  }, []);\n}\n\n// Reviver used to parse correctly the todos including the `Date` type, otherwise will be just a string\nfunction todoStateReviver(key: keyof TodoState, value: unknown): unknown {\n  if (key == \"todos\" && Array.isArray(value)) {\n    const todos: Partial<Todo>[] = value || [];\n\n    for (const todo of todos) {\n      if (todo) {\n        if (todo.createdAt) {\n          todo.createdAt = new Date(todo.createdAt);\n        }\n\n        if (todo.updatedAt) {\n          todo.updatedAt = new Date(todo.updatedAt);\n        }\n      }\n    }\n  }\n\n  return value;\n}\n","import { Provider as PaperProvider } from \"react-native-paper\";\nimport { NavigationContainer, Theme } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { useDarkTheme } from \"../contexts/DarkThemeContext\";\nimport Header from \"../layouts/Header\";\nimport routes from \"../routes\";\nimport AddTodo from \"./AddTodo\";\nimport EditTodo from \"./EditTodo\";\nimport ListTodos from \"./ListTodos\";\n\nconst Stack = createNativeStackNavigator();\n\nexport default function Main() {\n  // FIXME: react-native-paper and react-navigation theme types as semi-compatibles\n  const { theme } = useDarkTheme();\n\n  return (\n    <PaperProvider theme={theme}>\n      <NavigationContainer theme={theme as unknown as Theme}>\n        <Stack.Navigator\n          initialRouteName={routes.list}\n          screenOptions={{\n            header: (props) => <Header {...props} />,\n            animation: \"slide_from_bottom\",\n            contentStyle: styles.container,\n          }}\n        >\n          <Stack.Screen name={routes.list} component={ListTodos} />\n          <Stack.Screen name={routes.add} component={AddTodo} />\n          <Stack.Screen name={routes.edit} component={EditTodo} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </PaperProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 10,\n    height: \"90%\",\n  },\n});\n","import React from \"react\";\nimport Layout from \"./src/layouts/Layout\";\nimport { Provider } from \"react-redux\";\nimport { todoStore } from \"./src/redux/todos.store\";\nimport { DarkThemeProvider } from \"./src/contexts/DarkThemeContext\";\nimport Main from \"./src/pages/Main\";\n\nexport default function App() {\n  return (\n    <Provider store={todoStore}>\n      <DarkThemeProvider>\n        <Layout>\n          <Main />\n        </Layout>\n      </DarkThemeProvider>\n    </Provider>\n  );\n}\n"],"sourceRoot":""}